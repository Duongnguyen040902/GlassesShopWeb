using Group4_GlassesShop.Areas.Admin.Models;
using Group4_GlassesShop.Areas.Admin.Models.Interface;
using Group4_GlassesShop.Areas.Admin.Models.Repository;
using Group4_GlassesShop.Models.DataModel;
using Microsoft.AspNetCore.Mvc;
using NuGet.Protocol.Core.Types;

namespace Group4_GlassesShop.Controllers
{
    [Area("admin")]
    [Route("admin")]
	[Route("admin/adminDashboard")]

	public class AdminDashboardController : Controller
    {
		private IRepositoryOrder _repositoryOrder;

		public AdminDashboardController(IRepositoryOrder repositoryOrder) 
        {
			_repositoryOrder = repositoryOrder;

		}

		[Route("")]
		[Route("dashboard")]
        [HttpGet]
		public IActionResult Dashboard(DateTime startDate, DateTime endDate,string reportType)
        {
			startDate = DateTime.SpecifyKind(DateTime.Today.Date, DateTimeKind.Utc).AddHours(7); // Đặt lại múi giờ và thêm 7 giờ (theo múi giờ Việt Nam)
			endDate = startDate.AddDays(1).AddSeconds(-1); // Kết thúc vào 23:59:59 theo múi giờ Việt Nam
			decimal totalRevenue = _repositoryOrder.GetTotalRevenue(startDate, endDate);
			int soldOutProducts = _repositoryOrder.GetTotalSoldOutProducts(startDate, endDate);
			int totalOrders = _repositoryOrder.GetTotalOrders(startDate, endDate);
			int totalOrderInPro = _repositoryOrder.GetTotalOrdersInProgress(startDate, endDate);
			ReportOrder reportOrder = new ReportOrder(totalRevenue, totalOrders, totalOrderInPro, soldOutProducts);
			var orderPainding = _repositoryOrder.GetOrderPainding(startDate, endDate);
			var dailyReport = new ReportDetail
			{
				ReportOrder = reportOrder,
				Order = orderPainding,
			};
			return View(dailyReport);
        }		
		[Route("")]
		[Route("dashboard")]
        [HttpPost]
		public IActionResult Dashboard(DateTime startDate , DateTime endDate)
        {
			decimal totalRevenue = _repositoryOrder.GetTotalRevenue(startDate, endDate);
			int soldOutProducts = _repositoryOrder.GetTotalSoldOutProducts(startDate, endDate);
			int totalOrders = _repositoryOrder.GetTotalOrders(startDate, endDate);
			int totalOrderInPro = _repositoryOrder.GetTotalOrdersInProgress(startDate, endDate);
			ReportOrder reportOrder = new ReportOrder(totalRevenue, totalOrders, totalOrderInPro, soldOutProducts);
			var orderPainding = _repositoryOrder.GetOrderPainding(startDate, endDate);
			var Report = new ReportDetail
			{
				ReportOrder = reportOrder,
				Order = orderPainding,
			};
			return View(Report);
        }

        [Route("")]
        [Route("Confirm")]
        public IActionResult Confirm(int id)
        {
            _repositoryOrder.Confirm(id);
            return Json(new { success = true }); // Return JSON object indicating success
        }

    }
}
